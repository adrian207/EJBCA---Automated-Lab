## NGINX Ingress Controller Configuration
## Install with: helm install ingress-nginx ingress-nginx/ingress-nginx -f values.yaml -n ingress-nginx

controller:
  name: controller
  image:
    registry: registry.k8s.io
    image: ingress-nginx/controller
    tag: "v1.9.5"
    digest: ""
    pullPolicy: IfNotPresent
  
  ## DaemonSet or Deployment
  kind: Deployment
  
  ## Replicas
  replicaCount: 3
  
  ## Min available replicas
  minAvailable: 2
  
  ## Resources
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  ## Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  ## Service Configuration
  service:
    enabled: true
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
    externalTrafficPolicy: Local
    sessionAffinity: ""
    
  ## Ingress Class
  ingressClass: nginx
  ingressClassResource:
    name: nginx
    enabled: true
    default: true
    controllerValue: "k8s.io/ingress-nginx"
  
  ## Election ID for leader election
  electionID: ingress-controller-leader
  
  ## Ingress Class by Name
  ingressClassByName: false
  
  ## Configuration
  config:
    ## Client Body Size
    proxy-body-size: "50m"
    
    ## Proxy Timeouts
    proxy-connect-timeout: "600"
    proxy-send-timeout: "600"
    proxy-read-timeout: "600"
    
    ## Buffer Settings
    proxy-buffer-size: "16k"
    proxy-buffers-number: "4"
    
    ## SSL Configuration
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
    ssl-prefer-server-ciphers: "true"
    
    ## HSTS
    hsts: "true"
    hsts-max-age: "31536000"
    hsts-include-subdomains: "true"
    hsts-preload: "true"
    
    ## Rate Limiting
    limit-req-status-code: "429"
    
    ## Custom Headers
    add-headers: "ingress-nginx/custom-headers"
    
    ## Real IP Configuration
    use-forwarded-headers: "true"
    compute-full-forwarded-for: "true"
    
    ## Logging
    log-format-upstream: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id'
    
    ## Enable OpenTelemetry
    enable-opentelemetry: "true"
    opentelemetry-operation-name: "HTTP $request_method $service_name $uri"
    opentelemetry-trust-incoming-span: "true"
    otlp-collector-host: "otel-collector.observability.svc.cluster.local"
    otlp-collector-port: "4317"
  
  ## Metrics
  metrics:
    enabled: true
    port: 10254
    portName: metrics
    
    ## Prometheus
    prometheusRule:
      enabled: true
      additionalLabels: {}
      rules:
        - alert: NGINXConfigFailed
          expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
          for: 1s
          labels:
            severity: critical
          annotations:
            description: bad ingress config - nginx config test failed
            summary: uninstall the latest ingress changes to allow config reloads to resume
        
        - alert: NGINXCertificateExpiry
          expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
          for: 1s
          labels:
            severity: critical
          annotations:
            description: ssl certificate(s) will expire in less then a week
            summary: renew expiring certificates to avoid downtime
        
        - alert: NGINXTooMany500s
          expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
          for: 1m
          labels:
            severity: warning
          annotations:
            description: Too many 5XXs
            summary: More than 5% of all requests returned 5XX, this requires your attention
        
        - alert: NGINXTooMany400s
          expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
          for: 1m
          labels:
            severity: warning
          annotations:
            description: Too many 4XXs
            summary: More than 5% of all requests returned 4XX, this requires your attention
    
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
      type: ClusterIP
    
    serviceMonitor:
      enabled: true
      additionalLabels: {}
      namespace: ""
      namespaceSelector: {}
      scrapeInterval: 30s
      targetLabels: []
      metricRelabelings: []
  
  ## Pod Security Policy
  podSecurityPolicy:
    enabled: false
  
  ## Affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - ingress-nginx
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - controller
            topologyKey: kubernetes.io/hostname
  
  ## Topology Spread Constraints
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/component: controller
  
  ## Admission Webhooks
  admissionWebhooks:
    annotations: {}
    enabled: true
    failurePolicy: Fail
    port: 8443
    certificate: "/usr/local/certificates/cert"
    key: "/usr/local/certificates/key"
    namespaceSelector: {}
    objectSelector: {}
    
    service:
      annotations: {}
      servicePort: 443
      type: ClusterIP
    
    createSecretJob:
      resources: {}
    
    patchWebhookJob:
      resources: {}
    
    patch:
      enabled: true
      image:
        registry: registry.k8s.io
        image: ingress-nginx/kube-webhook-certgen
        tag: v20231011-8b53cabe0
        pullPolicy: IfNotPresent
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations: []
      runAsUser: 2000

## Default Backend
defaultBackend:
  enabled: true
  name: defaultbackend
  image:
    registry: registry.k8s.io
    image: defaultbackend-amd64
    tag: "1.5"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  minAvailable: 1
  
  resources:
    limits:
      cpu: 10m
      memory: 20Mi
    requests:
      cpu: 10m
      memory: 20Mi
  
  service:
    annotations: {}
    type: ClusterIP
    port: 80

## RBAC
rbac:
  create: true
  scope: false

## Pod Security Policy
podSecurityPolicy:
  enabled: false

## Service Account
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}

## Limit to specific namespaces
namespaceSelector: {}

