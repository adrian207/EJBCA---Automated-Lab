version: '3.8'

# Enterprise PKI Platform - Docker Compose
# Author: Adrian Johnson <adrian207@gmail.com>
# Architecture: Cost-optimized Docker deployment on Azure VMs

services:
  # ============================================================================
  # EJBCA CE - Certificate Authority
  # ============================================================================
  ejbca:
    image: keyfactor/ejbca-ce:8.3.0
    container_name: ejbca
    hostname: ejbca
    ports:
      - "8080:8080"   # HTTP Admin UI
      - "8443:8443"   # HTTPS Public Web
      - "8444:8444"   # HTTPS Admin UI
    environment:
      # Database configuration
      DATABASE_JDBC_URL: jdbc:postgresql://${POSTGRES_HOST:-postgres}:5432/${POSTGRES_DB:-ejbca}
      DATABASE_USER: ${POSTGRES_USER:-ejbcaadmin}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      
      # TLS configuration
      TLS_SETUP_ENABLED: "true"
      TLS_HOSTNAME: ${EJBCA_HOSTNAME:-ejbca.local}
      
      # EJBCA configuration
      EJBCA_CLI_DEFAULTPASSWORD: ${EJBCA_CLI_PASSWORD:-ejbca}
      
      # Azure Key Vault integration (optional)
      AZURE_KEYVAULT_NAME: ${AZURE_KEYVAULT_NAME:-}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID:-}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:-}
      
      # Java heap settings
      INITIAL_HEAP: 1024m
      MAX_HEAP: 4096m
      
      # Timezone
      TZ: UTC
    volumes:
      - ejbca-data:/opt/ejbca/p12
      - ejbca-config:/opt/primekey/conf
      - ejbca-logs:/opt/ejbca/wildfly/standalone/log
      - ./configs/ejbca:/mnt/external-config:ro
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ejbca/publicweb/healthcheck/ejbcahealth"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - pki-network
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=ejbca,environment=${ENVIRONMENT:-dev}"

  # ============================================================================
  # PostgreSQL Database (Local Development)
  # For production, use Azure Database for PostgreSQL
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ejbca}
      POSTGRES_USER: ${POSTGRES_USER:-ejbcaadmin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ejbcaadmin} -d ${POSTGRES_DB:-ejbca}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pki-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================================
  # NGINX - Reverse Proxy & TLS Termination
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: nginx
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
      - nginx-cache:/var/cache/nginx
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pki-network
    depends_on:
      - ejbca
      - grafana
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # ============================================================================
  # Prometheus - Metrics Collection
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pki-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================================
  # Grafana - Metrics Visualization
  # ============================================================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    hostname: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-azure-monitor-datasource,grafana-piechart-panel
      GF_SERVER_ROOT_URL: https://${GRAFANA_HOSTNAME:-grafana.local}
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_LOG_LEVEL: info
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pki-network
    depends_on:
      - prometheus
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================================
  # Loki - Log Aggregation
  # ============================================================================
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    hostname: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pki-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================================
  # Promtail - Log Shipping
  # ============================================================================
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    hostname: promtail
    command: -config.file=/etc/promtail/config.yaml
    volumes:
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yaml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ejbca-logs:/logs/ejbca:ro
      - nginx-logs:/logs/nginx:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - pki-network
    depends_on:
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # ============================================================================
  # Node Exporter - Host Metrics
  # ============================================================================
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    hostname: node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    restart: unless-stopped
    networks:
      - pki-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # ============================================================================
  # cAdvisor - Container Metrics
  # ============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    hostname: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - pki-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  ejbca-data:
    driver: local
  ejbca-config:
    driver: local
  ejbca-logs:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-logs:
    driver: local
  nginx-cache:
    driver: local

# ==============================================================================
# Networks
# ==============================================================================
networks:
  pki-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

